---
title: "Final Project - Individual Report"
editor: visual
format: 
  html:
    code-fold: true
execute:
  warning: false
  message: false
output-dir: docs
---

```{r}
#sets repository for downloading packages
options(repos = c(CRAN = "https://cloud.r-project.org"))

```

```{r, echo=FALSE}
#hides code block from being displayed on rendered HTML site
install.packages("fredr")
library(fredr)
library(tidyverse)
```

Install necessary libraries

```{r, results="hide", message=FALSE, warning=FALSE}
library(fredr)
library(tidyverse)
library(knitr)
library(dplyr)
library(ggplot2)
library(gt)
library(sf)
library(tmap)
library(tigris)
library(gifski)
library(ggrepel)
library(gganimate)
library(tools)
library(kableExtra)
```

```{r, include=FALSE}
fredr_set_key("eb19c6daa01e5e21da01a78d9dff470d")
```

Accessing Countrywide Unemployment Rates.

The series ID for the nationwide unemployment rate is "UNRATE". This is the Civilian Unemployment Rate.

The unemployment rate represents the number of unemployed as a percentage of the labor force. Labor force data are restricted to people 16 years of age and older, who currently reside in 1 of the 50 states or the District of Columbia, who do not reside in institutions (e.g., penal and mental facilities, homes for the aged), and who are not on active duty in the Armed Forces.

```{r}
# Retrieve monthly U.S. unemployment rate data
CW_unemployment_data <- fredr_series_observations(series_id = "UNRATE")

# Filter the data for the desired range
CW_unemployment_data_filtered <- CW_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

CW_unemployment_yearly <- CW_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

```

> U.S. Bureau of Labor Statistics, Unemployment Rate \[UNRATENSA\], retrieved from FRED, Federal Reserve Bank of St. Louis; https://fred.stlouisfed.org/series/UNRATENSA, December 10, 2024.

```{r}
library(ggplot2)

ggplot(CW_unemployment_data_filtered, aes(x = date, y = value)) +
    geom_line() +
    labs(title = "U.S. Unemployment Rate Over Time (2011-2022)",
         x = "Year",
         y = "Unemployment Rate (%)") +
    theme_minimal()

```

```{r}
# Retrieve U.S. recession indicator data
recession_data <- fredr_series_observations(series_id = "USREC")

# Merge with unemployment data
unemployment_recession <- merge(CW_unemployment_data_filtered, recession_data, by = "date", suffixes = c("_unemp", "_rec"))

ggplot(unemployment_recession, aes(x = date, y = value_unemp)) +
    geom_line(color = "blue") +
    geom_rect(data = unemployment_recession |> filter(value_rec == 1), 
              aes(xmin = date, xmax = lead(date), ymin = -Inf, ymax = Inf), 
              fill = "red", alpha = 0.2) +
    labs(title = "U.S. Unemployment Rate with Recession Periods (2011-Present)",
         x = "Year",
         y = "Unemployment Rate (%)") +
    theme_minimal()

```

```{r}
avg_unemployment_plot <- ggplot(CW_unemployment_yearly, aes(x = year, y = average_unemployment)) +
    geom_line() +
    labs(title = "Average Yearly U.S. Unemployment Rate (2011-2023)",
         x = "Year",
         y = "Average Unemployment Rate (%)") +
    theme_minimal()

#ggsave("average_yearly_US_unemployment_rate.png", plot=avg_unemployment_plot, width =6, height=4)

avg_unemployment_plot
```

```{r}
library(sf)
if(!file.exists("states.zip")){
  download.file("https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_500k.zip", 
                destfile="states.zip",
                method="curl")
}

##-
td <- tempdir(); 
zip_contents <- unzip("states.zip", 
                      exdir = td)

fname_shp <- zip_contents[grepl("shp$", zip_contents)]
zip_sf <- read_sf(fname_shp)
```

Search for series containing "unemployment rate"

```{r}
# Search for unemployment rate-related series
unemployment_search <- fredr_series_search_text("unemployment rate")

# Create the table and style it
kable(head(unemployment_search[,1:5]), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )

```

Filter for state-level unemployment rates

```{r}
# Filter for state-level unemployment rate series
state_unemployment_series <- unemployment_search |>
  filter(grepl("unemployment rate", title, ignore.case = TRUE)) |>
  filter(grepl("state", title, ignore.case = TRUE))


# Create the table and style it
kable(head(state_unemployment_series[,1:5]), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )

```

From looking through this list, realized we need all the ids that start with the state abbreviation followed by "UR" - each of these series id's gives us the unemployment for each state over time. THe next step does additional filtering.

```{r}
# List of state abbreviations
state_abbreviations <- c(
  "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
  "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
  "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
  "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
  "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"
)

# Filter for state unemployment series, need UR for seasonally adjusted
state_unemployment_series <- unemployment_search |>
  filter(id %in% paste0(state_abbreviations, "UR"))

# Create the table and style it
kable(head(state_unemployment_series[,1:5]), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )

```

Using the filtered list of series IDs (as shown above) to fetch unemployment data for each state.

```{r}
# Fetch unemployment data for all states
state_unemployment_data <- lapply(state_unemployment_series$id, function(series_id) {
  fredr(
    series_id = series_id,
    observation_start = as.Date("2011-01-01"),
    observation_end = as.Date("2022-12-31")
  )
})

# Add state abbreviation to each dataframe
state_unemployment_data <- mapply(
  function(data, id) {
    data$state <- substr(id, 1, 2)  # Extract state abbreviation
    data
  },
  state_unemployment_data,
  state_unemployment_series$id,
  SIMPLIFY = FALSE
)

# Combine into a single dataframe
state_unemployment_df <- do.call(rbind, state_unemployment_data)

# Create the table and style it
kable(head(state_unemployment_df[,1:5]), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )

```

Cleaning up the data to keep only the relevant columns and compute yearly averages for each state from 2011 to 2022 -

```{r}
library(dplyr)

# Clean and select relevant columns
state_unemployment_clean <- state_unemployment_df |>
  select(state, date, value) |>
  rename(
    unemployment_rate = value  # Rename value to unemployment_rate
  ) |>
  mutate(
    year = format(as.Date(date), "%Y")  # Extract year from the date
  )

# Compute yearly averages for each state
state_unemployment_yearly <- state_unemployment_clean |>
  filter(year >= 2011 & year <= 2022) |>
  group_by(state, year) |>
  summarize(
    avg_unemployment = mean(unemployment_rate, na.rm = TRUE),
    .groups = "drop"
  )

# Create the table and style it
kable(head(state_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Performing a check on the data we create a table showing the number of yearly records for each state. We can group the data by state and count the distinct years.

```{r}
library(dplyr)
library(gt)

# Count the number of years for each state
state_yearly_counts <- state_unemployment_yearly |>
  group_by(state) |>
  summarize(
    year_count = n(),  # Count the number of records (years)
    .groups = "drop"
  )

# Create gt table
state_yearly_counts |> 
  gt() |> 
  tab_header(
    title = "Yearly Records Count by State",
    subtitle = "Number of years with unemployment data (2011-2022)"
  )


# Create the table and style it
kable(head(state_yearly_counts), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )

```

Now we create an interactive map using the data. The steps involve the following:

```{r}
library(sf)
library(dplyr)
library(tmap)
library(tigris)

#rename existing shapefile
us_states <- zip_sf  # This is already read in from your code

#adjusting state column to match naming convention of state yearly unemployment table 
us_states <- us_states |>
  mutate(state = STUSPS) 

#adjusting geometry for Alaska and Hawaii
us_states <- shift_geometry(
  input_sf = us_states,
  geoid_column = "GEOID",
  preserve_area = FALSE, #scales Alaksa and Hawaii proportionately 
  position = "below" #places below continential US
)

#merging unemployment data with shapefile 
map_data <- us_states |>
  left_join(state_unemployment_yearly, by = "state")

#remove rows with missing values in map_data
map_data <- map_data |>
  filter(!is.na(year) & !is.na(avg_unemployment))

#creating interactive map 
#tmap_mode("view")  # Enable interactive mode for the map

tm <- tm_shape(map_data) +
  tm_polygons(
    col = "avg_unemployment",  # Column to use for shading
    title = "Unemployment Rate (%)",
    palette = "Blues",  # Color palette for the map
    style = "quantile",  # Break the shading into quantiles
    popup.vars = c("State" = "state", "Year" = "year", "Rate" = "avg_unemployment")
  ) +
  tm_facets(by = "year") +  # Animate changes over years
  tm_view(set.view = c(-98, 38, 4))  # Center and zoom the map on the US

# Render the map
tm


```

Altering the above code to make one interactive map-

```{r, echo=TRUE, message=FALSE, warning=FALSE, results="hide"}
library(sf)
library(dplyr)
library(tmap)
library(tools)
library(gifski) 
library(tigris)

#rename existing shapefile
us_states <- zip_sf  # This is already read in from code

#adjusting state column to match naming convention of state yearly unemployment table 
us_states <- us_states |>
  mutate(state = STUSPS) 

#adjusting geometry for Alaska and Hawaii
us_states <- shift_geometry(
  input_sf = us_states,
  geoid_column = "GEOID",
  preserve_area = FALSE, #scales Alaksa and Hawaii proportionately 
  position = "below" #places below continential US
)

#merging unemployment data with shapefile 
map_data <- us_states |>
  left_join(state_unemployment_yearly, by = "state")

#remove rows with missing values in map_data
map_data <- map_data |>
  filter(!is.na(year) & !is.na(avg_unemployment))

#creating interactive map 
tmap_mode("plot")  # This step is important - switch to static plotting mode

#define color palette
unemployment_palette <- "Blues"

#create animated map
anim <- (map_data) |>
  tm_shape() +
  tm_polygons(
    col = "avg_unemployment",         # Column for shading
    title = "Unemployment Rate (%)", 
    palette = unemployment_palette,   # Color palette
    style = "quantile"                # Quantile-based shading
  ) +
  tm_facets(along = "year", free.coords = FALSE) +
  tm_text("state", size = 0.5, col = "white", fontface = "bold")  # Add state labels
  tm_layout(
    legend.position = c("left", "bottom"),  # Move legend to the bottom-left
    legend.frame = TRUE,                    # Add a frame around the legend (optional)
    legend.outside = TRUE                   # Place the legend outside the map
  )


# Generate the animated GIF
tmap_animation(anim, delay = 50, filename = "unemployment_animation-dec11.gif")

```

```{r}
knitr::include_graphics("unemployment_animation-dec11.gif")
```

Creating an additional visualization where we compare average unemployment rates from 2011 to 2022 statewide against countrywide

```{r, echo=TRUE, message=FALSE, warning=FALSE, results="hide"}
# Load necessary library
library(ggplot2)
library(ggrepel) #for better placement of text labels 

#ensuring year is treated as numeric due to plotting issies 
state_unemployment_yearly$year <- as.numeric(state_unemployment_yearly$year)
CW_unemployment_yearly$year <- as.numeric(CW_unemployment_yearly$year)

# Labeling 2 max and 2 min 2011 unemployment states, too much overlap to label all 
extreme_states_2011 <- state_unemployment_yearly |>
  filter(year == 2011) |>
  arrange(avg_unemployment) |>
  slice(c(1:2, (n() - 1):n())) #2 min and 2 max states 

# Create the plot
ggplot() +
  # Add state unemployment lines
  geom_line(
    data = state_unemployment_yearly, 
    aes(x = year, y = avg_unemployment, group = state), 
    color = "gray", size = 0.5, alpha = 0.7
  ) +
  #Adding New York unemployment line in light red 
  geom_line(
    data = state_unemployment_yearly |> filter(state == "NY"),
    aes(x = year, y = avg_unemployment, color = "New York"),
    size = 0.8
  ) +
  # Add countrywide average unemployment line
  geom_line(
    data = CW_unemployment_yearly, 
    aes(x = year, y = average_unemployment), 
    color = "black", size = 1.5
  ) +
  # Add state labels for 2 max and 2 min states in 2011 
  geom_text_repel(
    data = extreme_states_2011,
    aes(x = 2011, y = avg_unemployment, label = state),
    size = 3, color = "gray", hjust = 1.2, #pushes labels slightly left
  ) +
  # Set x-axis to whole years
  scale_x_continuous(breaks = seq(2011, 2022, by = 1), limits = c(2011, 2023)) +
  # Adjust y-axis zoom (set appropriate limits as needed)
  scale_y_continuous(limits = c(2, 14)) + #zooms in on the unemployment range 
  # Add labels, title and legend
  labs(
    title = "Unemployment Rates by State and Countrywide (2011-2022)",
    x = "Year",
    y = "Unemployment Rate (%)",
    color = "Legend"
  ) +
  # Define colors for legend
  scale_color_manual(
    values = c("Other States" = "gray", "New York" = "red", "Countrywide"="black")
  ) +
  # Adjust the theme for clarity
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),  # Center the title
    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
    legend.position = "top",                # shows legend at top
    legend.box = "horizontal",         # Arrange the legend horizontally
    legend.text = element_text(size=8),
    legend.title = element_text(size=9),
    plot.margin = margin(t=30, r =20, l=20, unit="pt") #adding space for the legend
  )
```

We now explore different demographics on a countrywide level, keeping in mind our input variables for our predictive model: gender, race, and education.

[**Race**]{.underline}

Unemployment Rate - Black or African American

```{r}
library(dplyr)

black_unemployment_data <- fredr_series_observations(series_id = "LNS14000006")

# Filter the data for the desired range
black_unemployment_data_filtered <- black_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

black_unemployment_yearly <- black_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(black_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

> U.S. Bureau of Labor Statistics, Unemployment Rate - Black or African American \[LNS14000006\], retrieved from FRED, Federal Reserve Bank of St. Louis; https://fred.stlouisfed.org/series/LNS14000006, December 8, 2024

Creating an area chart as a visually appealing way to emphasize the changing rates of Black and African American unemployment over time.

```{r}
library(ggplot2)
ggplot(data = black_unemployment_yearly, aes(x = year, y = average_unemployment)) +
  geom_area(fill = "lightblue", alpha = 0.6) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "US Black and African American Unemployment Rates Over Time",
    x = "Year",
    y = "Average Unemployment Rate (%)"
  ) +
  theme_minimal() + 
   theme(
    plot.title = element_text(size = 16, face = "bold"),  # Adjust title size
    axis.text.x = element_text(size = 10),  # Adjust x-axis label size
    axis.title.x = element_text(size = 12),  # Adjust x-axis title size
    axis.text.y = element_text(size = 10),  # Adjust y-axis label size
    axis.title.y = element_text(size = 12)  # Adjust y-axis title size
  ) +
  scale_x_continuous(
    breaks = seq(2011, 2022, by = 1)  # Display only whole years
  )

```

The below code involves downloading, extracting and loading a US states shapefile from the US Census Bureau.

```{r, echo=TRUE, message=FALSE, warning=FALSE, results="hide"}
library(tmap)
library(sf)
library(dplyr)
library(tigris)
library(tools)
library(gifski)


# Step 2: Merge unemployment data with the shapefile
# Perform a cartesian join to apply the same rate to all states for each year
black_unemployment_map_data <- us_states |>
    mutate(key = 1) |>  # Add a key for the cartesian join
    left_join(
        black_unemployment_yearly |> mutate(key = 1), 
        by = "key"
    ) |>
    select(geometry, year, average_unemployment)

#remove rows with missing values in map_data
black_unemployment_map_data <- black_unemployment_map_data |>
  filter(!is.na(year) & !is.na(average_unemployment))

# Step 3: Set `tmap` mode to plot (required for animation)
tmap_mode("plot")

# Step 4: Create the animated map
us_map <- tm_shape(black_unemployment_map_data) +
    tm_polygons(
        col = "average_unemployment",  # Column for shading
        title = "Unemployment Rate (%)",
        palette = "YlOrRd",  # Color palette
        style = "quantile",  # Break into quantiles
        popup.vars = c(
            "Year" = "year",
            "Unemployment Rate" = "average_unemployment"
        )
    ) +
    tm_facets(along = "year") +  # Animate over years
    tm_layout(
        title = "Black Unemployment Rates in the US (2011–2022)",
        legend.outside = TRUE,
        frame = FALSE
    ) 

# Step 5: Create animation
tmap_animation(
    us_map,
    delay = 50,  # Delay between frames in milliseconds
    filename = "black_unemployment.gif",
    width = 800,
    height = 600
)



```

```{r}
knitr::include_graphics("black_unemployment.gif")
```

White unemployment rates

```{r}
library(dplyr)

white_unemployment_data <- fredr_series_observations(series_id = "LNS14000003")

# Filter the data for the desired range
white_unemployment_data_filtered <- white_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

white_unemployment_yearly <- white_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))
```

```{r}
library(ggplot2)

# Combine both datasets into a single table for easier plotting
combined_unemployment <- rbind(
  black_unemployment_yearly |> mutate(group = "Black"),
  white_unemployment_yearly |> mutate(group = "White")
)

# Creating bar chart
ggplot(combined_unemployment, aes(x = factor(year), y = average_unemployment, fill = group)) +
  geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
  scale_fill_manual(values = c("Black" = "blue", "White" = "red")) +
  labs(
    title = "Comparison of Black and White Unemployment Rates by Year (2011–2022)",
    x = "Year",
    y = "Average Unemployment Rate (%)",
    fill = "Group"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    legend.position = "top",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```

Hispanic or Latino Unemployment Rates

```{r}
hispanic_unemployment_data <- fredr_series_observations(series_id = "LNS14000009")

# Filter the data for the desired range
hispanic_unemployment_data_filtered <- hispanic_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

hispanic_unemployment_yearly <- hispanic_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(hispanic_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Asian Unemployment Rates

```{r}
library(dplyr)

asian_unemployment_data <- fredr_series_observations(series_id = "LNS14032183")

# Filter the data for the desired range
asian_unemployment_data_filtered <- asian_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

asian_unemployment_yearly <- asian_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(asian_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Lets take a look at a faceted line plot to explore the differences in unemployment rates across each race

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Add a 'group' column to each dataset
CW_unemployment_yearly$group <- "Countrywide Average"
black_unemployment_yearly$group <- "Black"
asian_unemployment_yearly$group <- "Asian"
hispanic_unemployment_yearly$group <- "Hispanic"
white_unemployment_yearly$group <- "White"

# Combine all datasets into one
combined_racial_unemployment <- bind_rows(
  CW_unemployment_yearly,
  black_unemployment_yearly,
  asian_unemployment_yearly,
  hispanic_unemployment_yearly,
  white_unemployment_yearly
)

# Create the faceted line plot
ggplot(data = combined_racial_unemployment, aes(x = year, y = average_unemployment)) +
  geom_line(aes(color = group), size = 1) +  # Line for each group
  scale_color_manual(
    values = c(
      "Countrywide Average" = "black",
      "Black" = "blue",
      "Asian" = "green",
      "Hispanic" = "orange",
      "White" = "red"
    )
  ) +
  facet_wrap(~ group, ncol = 1, scales = "fixed") +  # Facet by group
  scale_x_continuous(
    breaks = seq(2011, 2022, by=1), #display each year
    limits = c(2011,2022)
  ) +
  labs(
    title = "Racial Unemployment Trends (2011-2022)",
    x = "Year",
    y = "Unemployment Rate (%)",
    color = "Group"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),  # Center and size the title
    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
    legend.position = "none", #no legend
    strip.text = element_text(size = 12) #adjusts facet labels 
  )

```

Facets do not get our point across, so switching over to a line plot.

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Add a 'group' column to each dataset
CW_unemployment_yearly$group <- "Countrywide Average"
black_unemployment_yearly$group <- "Black"
asian_unemployment_yearly$group <- "Asian"
hispanic_unemployment_yearly$group <- "Hispanic"
white_unemployment_yearly$group <- "White"

# Combine all datasets into one
combined_racial_unemployment <- bind_rows(
  CW_unemployment_yearly,
  black_unemployment_yearly,
  asian_unemployment_yearly,
  hispanic_unemployment_yearly,
  white_unemployment_yearly
)

# Create a single-panel line plot
ggplot(data = combined_racial_unemployment, aes(x = year, y = average_unemployment, color = group)) +
  geom_line(data = combined_racial_unemployment |> filter(group == "Countrywide Average"), size = 4) +  # Bold line for countrywide average
  geom_line(data = combined_racial_unemployment |> filter(group != "Countrywide Average"), size = .6) +  # Normal lines for other groups
  scale_color_manual(
    values = c(
      "Countrywide Average" = "grey",
      "Black" = "blue",
      "Asian" = "green",
      "Hispanic" = "orange",
      "White" = "red"
    )
  ) +
  scale_x_continuous(
    breaks = seq(2011, 2022, by = 1),  # Display each year as a tick
    limits = c(2011, 2022)
  ) +
  scale_y_continuous(limits = c(0, 15)) +  # Adjust y-axis range as needed
  labs(
    title = "Unemployment Trends by Race (2011-2022)",
    x = "Year",
    y = "Unemployment Rate (%)",
    color = "Group"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),  # Center the title
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
  )

```

[**Gender**]{.underline}

Pulling gender based US historic seasonally adjusted unemployment rates.

Below pulls the seasonally adjusted unemployment percentage for women aged 20 years & older.

```{r}
library(dplyr)

women_unemployment_data <- fredr_series_observations(series_id = "LNS14000026")

# Filter the data for the desired range
women_unemployment_data_filtered <- women_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

women_unemployment_yearly <- women_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(women_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Below pulls the seasonally adjusted unemployment percentage for men aged 20 years & older.

```{r}
library(dplyr)

men_unemployment_data <- fredr_series_observations(series_id = "LNS14000025")

# Filter the data for the desired range
men_unemployment_data_filtered <- men_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

men_unemployment_yearly <- men_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(men_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Now taking a look at the average unemployment by gender compared to the countrywide average from 2011-2022.

First to prepare the data we combine our `women_unemployment_yearly`, `men_unemployment_yearly`, and `CW_unemployment_yearly` into one dataset, to later create visualizations off of.

```{r}
# Add 'group' column to women and men unemployment datasets
women_unemployment_yearly <- women_unemployment_yearly |>
  mutate(group = "Women")

men_unemployment_yearly <- men_unemployment_yearly |>
  mutate(group = "Men")

# Combine datasets
combined_gender_unemployment <- bind_rows(
  women_unemployment_yearly,
  men_unemployment_yearly,
  CW_unemployment_yearly
)

```

Next we create an **Animated Line Plot**, which shows unemployment trends for men, women and countrywide averages over time.

```{r, eval=FALSE, echo=TRUE, message=FALSE, warning=FALSE, results="hide"}
library(ggplot2)
library(gganimate)
library(gifski)
library(dplyr)

# Create the animation with `transition_reveal()`
animated_plot <- ggplot(combined_gender_unemployment, aes(x = year, y = average_unemployment, color = group, group = group)) +
  geom_line(data = combined_gender_unemployment, size = 1.2) +
  geom_line(data = combined_gender_unemployment |> filter(group == "Countrywide Average"), size=2.5
  ) +
  scale_color_manual(values = c("Men" = "blue", "Women" = "red", "Countrywide Average" = "black")) +
  labs(
    title = "Unemployment Trends by Gender and Countrywide (2011-2022)",
    x = "Year",
    y = "Unemployment Rate (%)",
    color = "Group"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  transition_reveal(year)  # Incrementally draw the lines over time

animated_plot

# Render and save the animation
# animate(
#   animated_plot,
#   width = 800,
#   height = 600,
#   duration = 10,  # Duration of the animation in seconds
#   fps = 10,       # Frames per second
#   renderer = gifski_renderer("gender_unemployment_trends_reveal.gif")
# )


```

```{r, eval=FALSE}
knitr::include_graphics("gender_unemployment_trends_reveal.gif")
```

[**Gender x Race**]{.underline}

Black or African Men, 20 yrs & older

```{r}
library(dplyr)

black_men_unemployment_data <- fredr_series_observations(series_id = "LNS14000031")

# Filter the data for the desired range
black_men_unemployment_data_filtered <- black_men_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

black_men_unemployment_yearly <- black_men_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(black_men_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Black or African American Women, 20 yrs & older

```{r}
library(dplyr)

black_women_unemployment_data <- fredr_series_observations(series_id = "LNS14000032")

# Filter the data for the desired range
black_women_unemployment_data_filtered <- black_women_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

black_women_unemployment_yearly <- black_women_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(black_women_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )

```

Hispanic or latino men, 20 yrs. & older

```{r}
library(dplyr)

hispanic_men_unemployment_data <- fredr_series_observations(series_id = "LNU04000034")

# Filter the data for the desired range
hispanic_men_unemployment_data_filtered <- hispanic_men_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

hispanic_men_unemployment_yearly <- hispanic_men_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(hispanic_men_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Hispanic or latino women, 20 yrs. & older

```{r}
library(dplyr)

hispanic_women_unemployment_data <- fredr_series_observations(series_id = "LNU04000035")

# Filter the data for the desired range
hispanic_women_unemployment_data_filtered <- hispanic_women_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

hispanic_women_unemployment_yearly <- hispanic_women_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(hispanic_women_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

White men, 20 yrs & older

```{r}
library(dplyr)

white_men_unemployment_data <- fredr_series_observations(series_id = "LNS14000028")

# Filter the data for the desired range
white_men_unemployment_data_filtered <- white_men_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

white_men_unemployment_yearly <- white_men_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(white_men_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

White women, 20 yrs. & older

```{r}
library(dplyr)

white_women_unemployment_data <- fredr_series_observations(series_id = "LNS14000029")

# Filter the data for the desired range
white_women_unemployment_data_filtered <- white_women_unemployment_data |>
  filter(date >= as.Date("2011-01-01") & date < as.Date("2023-01-01"))

white_women_unemployment_yearly <- white_women_unemployment_data_filtered |>
    mutate(year = lubridate::year(date)) |>
    group_by(year) |>
    summarize(average_unemployment = mean(value))

# Create the table and style it
kable(head(white_women_unemployment_yearly), format = "html") |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  )
```

Data shortcoming - this not available for Asian x Gender, but available for other races.

## **Appendix**

Exploring neighborhood-level data from the American Community Survey (ACS) through the US Census Bureau

Installing packages for direct access to the Census Bureau's API to allow me to pull ACS data for various geographic levels, in the attempt to get more granular than bureau

```{r}
install.packages("tidycensus")
install.packages("tidyverse")
install.packages("dplyr")
```

Loading libraries

```{r}
library(tidycensus)
library(tidyverse)
library(dplyr)
library(gt)
library(ggplot2)
```

```{r, eval=FALSE}
census_api_key("6636b8e0ee8ebbb2edd3e4bfe9ef001572dc79ad", install=TRUE)
```

Exploring ACS Variables

```{r}
acs_vars <- load_variables(2022, "acs5", cache =TRUE) #using 2022 as most recent full year available in ACS
view(acs_vars)
```

Fetching Neighborhood-Level Data

```{r}

# Variables for analysis
selected_vars <- c(
  med_income = "B19013_001E",  # Median household income
  poverty = "B17001_002E",     # People below poverty level
  population = "B01003_001E"   # Total population
)

# Fetch data for NYC at the census tract level
nyc_neighborhood_data <- get_acs(
  geography = "tract",
  variables = selected_vars,
  state = "NY",
  county = c("New York", "Kings", "Queens", "Bronx", "Richmond"),
  year = 2022,
  survey = "acs5",
  geometry = TRUE # Include geometry for mapping
)

# Inspect the data
head(nyc_neighborhood_data)

```

```{r}
# Summarize median income across census tracts
income_summary <- nyc_neighborhood_data |>
  filter(variable == "B19013_001") |>
  summarize(
    mean_income = mean(estimate, na.rm = TRUE),
    median_income = median(estimate, na.rm = TRUE),
    min_income = min(estimate, na.rm = TRUE),
    max_income = max(estimate, na.rm = TRUE)
  )

print(income_summary)

```

List of neighborhoods with data

```{r}

# Filter data for median income
median_income_table <- nyc_neighborhood_data |>
  filter(variable == "B19013_001") |>
  mutate(
    borough = case_when(
      str_detect(NAME, "Bronx") ~ "Bronx",
      str_detect(NAME, "Kings") ~ "Brooklyn",
      str_detect(NAME, "New York County") ~ "Manhattan",
      str_detect(NAME, "Queens") ~ "Queens",
      str_detect(NAME, "Richmond") ~ "Staten Island",
      TRUE ~ "Unknown"
    )
  )

# Create a table
median_income_table |>
  select(borough, NAME, estimate) |>
  rename(
    Neighborhood = NAME,
    `Median Income ($)` = estimate,
    Borough = borough
  ) |>
  gt() |>
  tab_header(
    title = "Median Household Income by Neighborhood",
    subtitle = "Census Tract Data for NYC Boroughs"
  ) |>
  fmt_number(
    columns = `Median Income ($)`,
    decimals = 0
  ) |>
  cols_align(
    align = "left",
    columns = everything()
  )

#remove geometry column 
median_income_table_clean <- median_income_table |>
  select(-geometry) |>
  rename(
    'Median Income ($)' = estimate
  )

# Create a cleaner `gt` table
median_income_table_clean |>
  gt() |>
  tab_header(
    title = "Median Household Income by Neighborhood",
    subtitle = "Census Tract Data for NYC Boroughs"
  ) |>
  fmt_number(
    columns = `Median Income ($)`,
    decimals = 0
  ) |>
  cols_align(
    align = "left",
    columns = everything()
  )
```

Creating a map. Grey areas indicate locations where census data is unavailable - such as parks, airports or other non-residential areas

```{r}
library(ggplot2)
library(sf)

# Filter for median income data
median_income_map_data <- median_income_table_clean |>
  filter(variable == "B19013_001") # Ensure this is the correct variable for median income

# Create the map
ggplot(median_income_map_data) +
  geom_sf(aes(fill = `Median Income ($)`), color = "white", size = 0.1) +
  scale_fill_viridis_c(option = "plasma", na.value = "grey") +
  labs(
    title = "Median Household Income by Neighborhood in NYC",
    subtitle = "Census Tract Data (ACS 2022)",
    fill = "Median Income ($)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )

```

The above is a map of all available data for each neighborhood in each of the 5 boroughs in NYC. Now we look at this data borough by borough, to get a better visual of each.

```{r}
# List of boroughs
boroughs <- c("Bronx", "Kings", "New York County", "Queens", "Richmond")

# Loop to create and print maps for each borough
for (borough in boroughs) {
  borough_data <- median_income_map_data |>
    filter(str_detect(NAME, borough))
  
  # Create map
  p <- ggplot(borough_data) +
    geom_sf(aes(fill = `Median Income ($)`), color = "white", size = 0.1) +
    scale_fill_viridis_c(option = "plasma", na.value = "grey") +
    labs(
      title = paste("Median Household Income in", borough),
      subtitle = "Census Tract Data (ACS 2022)",
      fill = "Median Income ($)"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 16, face = "bold"),
      plot.subtitle = element_text(size = 12)
    )
  
  # Explicitly print the plot
  print(p)
}


```

Race, gender, education for model
